#include "DECODER_nurses.hpp"
#include <iostream>
#include <math.h>
#include <climits>
//#include <tuple>
#include <algorithm>
#include <iterator>

// Return the chromosome lenth
int DECODER_nurses::getChromosomeLength(int nNurses) {
        return nNurses;
}

void DECODER_nurses::decode(vector<Individual> &population, int totalHours, int nNurses, int maxHours, int minHours, int maxConsecHours, int maxPresenceHours, vector<float> demandH) {

        // For every individual of the population
        for (int i = 0; i < population.size(); i++) {
                // Decode its chromosome to get its solution and fitness
                std::pair< vector<float>, float> solutionFitness = decoder_nurses(nNurses, totalHours, maxHours, minHours, maxConsecHours, maxPresenceHours, demandH, population[i].chromosome, i);
                // Clear the previous solution and assign the new one
                population[i].solution.clear();
                population[i].solution.insert(population[i].solution.begin(), solutionFitness.first.begin(), solutionFitness.first.end()); 	
                population[i].fitness = solutionFitness.second;
        }
}

bool compareByChromosome(const float &a, const float &b)
{
    return a < b;
}

bool compareByIndex(const std::pair<float,int> &a, const std::pair<float,int> &b)
{
    return a.first > b.first;
}

/*
bool compareByIndexTuple(const std::tuple<float, int, int> &a, const std::tuple<float, int, int> &b)
{
    return std::get<0>(a) > std::get<0>(b);
}
*/

#if 0
void makeNurseFeasible(int nurseError, vector<float> &Hours, vector<float> &workedHours, int nurse, int totalHours, int minHours, int maxConsecHours)
{
	int firstWorkedHour;	
	int accumulatedHours = 0;
	
	/* First worked hour */
	for (int i = 0; i < totalHours; i++) {
		if (Hours[i + nurse * totalHours] == 1) {
			firstWorkedHour = i;
			break;
		}
	}
	
	/* Accumulated worked hours */
	for (int i = nurse * totalHours; i < ((nurse * totalHours) + totalHours); i++) accumulatedHours += Hours[i];
	
	switch(nurseError) {
		case 1: 
		{
			int lastConsecHours = 0;
			for (int i=firstWorkedHour+1; i<totalHours; i++) {
				if (Hours[i + nurse * totalHours] == 0) {
					for (int i = ((nurse * totalHours) + i)-1; (i >= nurse * totalHours); i--) {
						lastConsecHours += Hours[i];
						if (Hours[i] == 0) break;
					}

					for (int j = ((nurse * totalHours) + i)+1; (j < (nurse * totalHours) + totalHours); j++) {
						lastConsecHours += Hours[j];
						if (Hours[j] == 0) break;
					}
				
					if (lastConsecHours < maxConsecHours) {				
						Hours[i + nurse * totalHours] = 1;
						workedHours[i]++;
						accumulatedHours++;
					}
				}
					if (accumulatedHours == minHours) break;
			}
			break;
		}
		default: break;
	}
}
#endif

void makeNurseWork(vector<float> &Hours, vector<float> &demandH, int nurse, int minHours, int maxHours, int maxConsecHours, int maxPresenceHours)
{
	int totalHours = demandH.size();
	int maxDemandHour = std::distance(demandH.begin(), std::max_element(demandH.begin(),demandH.end()));
	float demandLeft = 0;
	float demandRight = 0;
	int lastConsecHours = 0;
	
	Hours[(nurse * totalHours) + maxDemandHour] = 1;
	demandH[maxDemandHour] = max(0, (int)demandH[maxDemandHour]-1);
	
	for (int i = ((nurse * totalHours) + maxDemandHour)-1; (i >= nurse * totalHours); i--) {
		if (Hours[i] == 0) {
			demandLeft += demandH[i];
		}
	}

	for (int j = ((nurse * totalHours) + maxDemandHour)+1; (j < (nurse * totalHours) + totalHours); j++) {
		if (Hours[j] == 0) {
			demandRight += demandH[j];
		}
	}
	
	if (demandLeft > demandRight) {
		if (lastConsecHours == maxConsecHours);
	}
}

/* A function to check if a solution is correct */
bool checkFeasibilityAfter(vector<float> Hours, vector<int> nurseWorked, int nurse, int totalHours, int minHours)
{
	int accumulatedHours = 0;
	
	if (!nurseWorked[nurse]) return true;

	/* The Nurse reach the minHours */
	for (int i = nurse * totalHours; i < ((nurse * totalHours) + totalHours); i++) accumulatedHours += Hours[i];
	if (accumulatedHours < minHours) return false;
	
	
	/* The Nurse does not rest more than one hour */
	///*
	for (int i = nurse * totalHours; i < ((nurse * totalHours) + totalHours); i++) {
		if (Hours[i]) {
			int restingHours = 0;
			int j;
			for (j = i+1; j < ((nurse * totalHours) + totalHours); j++) {
				if (Hours[j] == 0) restingHours++;
				else break;
			}
			if (restingHours > 1 && j != ((nurse * totalHours) + totalHours)) return false;
		}
	}
	//*/
	
	/* Each demandH is achieved */
	
	return true;

}


bool checkDemandHours(vector<float> Hours, vector<float> demandH, int hour, int nurse, int nNurses)
{
	if ((Hours[hour] < demandH[hour]) && ((nNurses - nurse) <= (demandH[hour] - Hours[hour]))) return false;
	return true;
}

bool checkDemandHoursWeek(vector<float> Hours, vector<float> demandH)
{
	for (int i = 0; i < Hours.size(); i++) if (Hours[i] < demandH[i]) return false;
	//for (int i = 0; i < Hours.size(); i++) if (Hours[i] != 0) return false;
	return true;
}

/* A function to check the empty hours */
void checkNurseSchedulingFeasibility(vector<float> &Hours, vector<float> &workingHours, vector<int> nurseWorked, int nurse, int totalHours, int minHours, int maxHours, int maxConsecHours, int maxPresenceHours)
{
	int accumulatedHours = 0;
	int firstWorkedHour = 0;
	int lastWorkedHour = 0;
	int presence = 0;
	int firstConsecHours = 0;
	int lastConsecHours = 0;
	
	// Only check if that nurse has worked
	if (nurseWorked[nurse]) {
		for (int i = nurse * totalHours; i < ((nurse * totalHours) + totalHours); i++) accumulatedHours += Hours[i];
		
		/* First worked hour */
		for (int i = 0; i < totalHours; i++) {
			if (Hours[i + nurse * totalHours] == 1) {
				firstWorkedHour = i;
				break;
			}
		}
	
		/* Last worked hour */
		for (int i = totalHours-1; i >= 0; i--) {
			if (Hours[i + nurse * totalHours] == 1) {
				lastWorkedHour = i;
				break;
			}
		}
		
		/* Calculating presence */
		presence = lastWorkedHour - firstWorkedHour + 1;
	
		/* The Nurse does not rest more than one hour */
		///*
		for (int i = firstWorkedHour; i < lastWorkedHour && accumulatedHours < maxHours; i++) {
			if (Hours[i + (nurse * totalHours)]) {
				int restingHours = 0;
				bool feasible = true;
				int j;
				for (j = i+1; j < totalHours && j < i+3; j++) {
					if (Hours[j + (nurse * totalHours)]) feasible = false;
				}
				if (feasible) {
					int leftConsecHours = 0;
					int rightConsecHours = 0;
					for (int ii=i; ii >= 0; ii--) {
						leftConsecHours += Hours[ii + (nurse * totalHours)];
						if (Hours[ii + (nurse * totalHours)] == 0) break;
					}

					for (j = i+3; j < totalHours; j++) {
						rightConsecHours += Hours[j + (nurse * totalHours)];
						if (Hours[j + (nurse * totalHours)] == 0) break;
					}
					
					if (rightConsecHours < maxConsecHours) { 
						Hours[i + (nurse * totalHours) + 2] = 1;
						workingHours[i + 2]++; 
						accumulatedHours++; 
					}
					else if (leftConsecHours < maxConsecHours) { 
						Hours[i + (nurse * totalHours) + 1] = 1; 
						workingHours[i + 1]++; 
						accumulatedHours++; 
					}
				}
			}
		}

		/* The Nurse reach the minHours */
		///*
		if (accumulatedHours < minHours) {
			int firstWorkedHourAux;
			int lastWorkedHourAux;
			
			/* First consecutive worked hours */
			for (int i = firstWorkedHour; i < totalHours; i++) {
				firstConsecHours += Hours[i + (nurse * totalHours)];
				if (Hours[i + (nurse * totalHours)] == 0) break;
			}
			
			/* Last consecutive worked hours */
			for (int i = lastWorkedHour; i >= 0; i--) {
				lastConsecHours += Hours[i + (nurse * totalHours)];
				if (Hours[i + (nurse * totalHours)] == 0) break;
			}
			
			if (firstConsecHours == maxConsecHours) firstWorkedHourAux = firstWorkedHour - 2;
			else firstWorkedHourAux = firstWorkedHour - 1;
			
			if (lastConsecHours == maxConsecHours) lastWorkedHourAux = lastWorkedHour + 2;
			else lastWorkedHourAux = lastWorkedHour + 1;
			
			while (presence < maxPresenceHours && accumulatedHours < minHours) {
				if (firstWorkedHourAux >= 0) {
					Hours[firstWorkedHourAux + (nurse * totalHours)] = 1;
					workingHours[firstWorkedHourAux]++; 
					accumulatedHours++;
					presence++;
					firstConsecHours++;
					if (firstConsecHours == maxConsecHours) firstWorkedHourAux -= 2;
					else firstWorkedHourAux--;
				}
				else if (lastWorkedHourAux < totalHours) {
					Hours[lastWorkedHourAux + (nurse * totalHours)] = 1;
					workingHours[lastWorkedHourAux]++; 
					accumulatedHours++;
					presence++;
					lastConsecHours++;
					if (lastConsecHours == maxConsecHours) lastWorkedHourAux += 2;
					else lastWorkedHourAux++;
				}
			}
		}
		//*/
	}

}

/* A function to check if a nurse can work in an hour */
bool checkNurseFeasibility(vector<float> Hours, int hour, int nurse, int totalHours, int maxHours, int maxConsecHours, int maxPresenceHours) 
{
	bool feasible = true;
	
	int accumulatedHours = 0;
	int lastConsecHours = 0;
	int firstWorkedHour = -1;
	int lastWorkedHour = -1;
	
	/* Accumulated worked hours */
	/* Just to check until that hour */
	//for (int i = nurse * totalHours; i < ((nurse * totalHours) + hour); i++) accumulatedHours += Hours[i];
	/* Check all the hours */
	for (int i = nurse * totalHours; i < ((nurse * totalHours) + totalHours); i++) accumulatedHours += Hours[i];
	
	/* Last consecutive worked hours */
	/* Just to check until that hour */
	bool consecBefore = true;
	bool consecAfter = true;
	for (int i = ((nurse * totalHours) + hour)-1; (i >= nurse * totalHours); i--) {
		lastConsecHours += Hours[i];
		if (Hours[i] == 0) break;
	}

	for (int j = ((nurse * totalHours) + hour)+1; (j < (nurse * totalHours) + totalHours); j++) {
		lastConsecHours += Hours[j];
		if (Hours[j] == 0) break;
	}
	
	/* First worked hour */
	for (int i = 0; i < totalHours; i++) {
		if (Hours[i + nurse * totalHours] == 1) {
			firstWorkedHour = i;
			break;
		}
	}
	
	/* Last worked hour */
	for (int i = totalHours-1; i >= 0; i--) {
		if (Hours[i + nurse * totalHours] == 1) {
			lastWorkedHour = i;
			break;
		}
	}
	
	/* The Nurse doesn't exceed the maxHours */
	if (accumulatedHours >= maxHours) feasible = false; //{ cout << "hour: " << hour << " accumulatedHours: " << accumulatedHours << " maxHours: " << maxHours << endl; feasible = false; }
	
	/* The Nurse doesn't exceed the maxConsecHours */
	if (lastConsecHours >= maxConsecHours) feasible = false;
	
	/* The Nurse doesn't exceed the maxPresence */	
	if (firstWorkedHour != -1) {
		firstWorkedHour = std::min(firstWorkedHour, hour);
		lastWorkedHour = std::max(lastWorkedHour, hour);
		if ((lastWorkedHour - firstWorkedHour) >= maxPresenceHours) feasible = false;
	}
	
	return feasible;
}

std::pair< vector<float>, float> DECODER_nurses::decoder_nurses(int nNurses, int totalHours, int maxHours, int minHours, int maxConsecHours, int maxPresenceHours, vector<float> demandH, vector<float> chromosome, int ind) {

	std::pair< vector<float>, float> solutionFitness;
	//solutionFitness.first = vector<float>(nNurses + (nNurses * totalHours), 0);
	solutionFitness.first = vector<float>((nNurses * totalHours), 0);
	//solutionFitness.first = vector<float>(2 * nNurses, 0);
	
	vector<float> Hours(totalHours, 0);
	vector<int> nurseWorked(nNurses, 0);
	int nurseWorked2 = 0;
	int nurseWorked3 = 0;
	int hourOK = 0;
	bool feasible;
	bool incorrect = false;

	/* Decoder where nurses and hours are sorted by the chromosome (totalHours + (Hours * nNurses))*/
	//#if 0
	// First we sort the nurses and we store them with their indices
	vector<float> chr_hour_unindexed(chromosome.begin(), chromosome.begin() + totalHours);
	vector<float> chr_nurseHour_unindexed(chromosome.begin() + totalHours, chromosome.end());
	
	vector <std::pair<float, int> > chr_hour_indexed(chr_hour_unindexed.size());
	for (int i = 0; i < chr_hour_indexed.size(); i++) chr_hour_indexed[i] = std::make_pair(chr_hour_unindexed[i], i);
	sort(chr_hour_indexed.begin(), chr_hour_indexed.end(), compareByIndex);
	
	vector <std::pair<float, int> > chr_nurseHour_indexed(nNurses * totalHours);
	for (int i = 0; i < chr_nurseHour_indexed.size(); i++) {
		int nurse = i%nNurses;
		chr_nurseHour_indexed[i] = std::make_pair(chr_nurseHour_unindexed[i], nurse);
  }

	for (int jj = 0; jj < totalHours; jj++) {
		int j = chr_hour_indexed[jj].second;     // Hour
		sort(chr_nurseHour_indexed.begin() + (j * nNurses), chr_nurseHour_indexed.begin() + (j * nNurses) + nNurses, compareByIndex);
			for (int ii = 0; ii < nNurses; ii++) {
				int i = chr_nurseHour_indexed[ii + (j * nNurses)].second;     // Nurse
				int assigned = 0;
				//Try to make this nurse work
				feasible = checkNurseFeasibility(solutionFitness.first, j, i, totalHours, maxHours, maxConsecHours, maxPresenceHours);
				if (feasible) {
					solutionFitness.first[j + (i*totalHours)] = 1;
					Hours[j]++;
					nurseWorked[i] = 1;
				}
				if (Hours[j] >= demandH[j]) break;
				//else that nurse doesn't work
			}
	}
	
	// Check for each nurse that he/she has worked in a good way
	
	for (int i = 0; i < nNurses; i++) {
		checkNurseSchedulingFeasibility(solutionFitness.first, Hours, nurseWorked, i, totalHours, minHours, maxHours, maxConsecHours, maxPresenceHours);
	}
	
	int hoursLeft = 0;
	for (int i = 0; i < Hours.size(); i++) {
		if (Hours[i] >= demandH[i]) hourOK++;
		hoursLeft += demandH[i] - min(demandH[i], Hours[i]);
	}
	
	for (int i=0; i<nNurses; i++) {
			if (checkFeasibilityAfter(solutionFitness.first, nurseWorked, i, totalHours, minHours)) nurseWorked2++;
	}
	
	feasible = checkDemandHoursWeek(Hours, demandH);
	if (!feasible) {
		if (ind == 0) cout << "demandH not reached" << endl;
    solutionFitness.second = 30*(totalHours - hourOK) + 1*hoursLeft + nNurses;
		return solutionFitness;
	}

	if (nurseWorked2 != nNurses) {
		solutionFitness.second = /*(nNurses - nurseWorked2) + (totalHours - hourOK) exceededHour*/ 0.01*(nNurses - nurseWorked2) + nNurses;
		return solutionFitness;
	}
	
	//#endif

	int sum = 0;
  for (int i=0; i<nNurses; i++) sum += nurseWorked[i];
  solutionFitness.second = sum;
  return solutionFitness;
}

